#include "stdlib.h"
#include "stdio.h"
#include "malloc.h"
#include "string.h"

char* copiaza(char* string) {
	char* nou = (char*)malloc(sizeof(char)*(strlen(string) + 1));
	strcpy(nou, string);
	return nou;
}

struct linieREP {
	unsigned int locZbor;
	float costBilet;
	int idRezervare;
	char* idZbor;
	char* numeClient;
};

struct ListaSREP {
	linieREP* info;
	ListaSREP* nextS;
};

struct ListaPREP {
	linieREP* info;
	ListaPREP* nextP;
	ListaSREP* listaNoduri;
};

ListaPREP* graf = NULL;
int contor = 5;

ListaPREP* creareNodPREP(linieREP* rep) {
	ListaPREP* nou = (ListaPREP*)malloc(sizeof(ListaPREP));
	nou->info = rep;
	nou->nextP = NULL;
	nou->listaNoduri = NULL;
	return nou;
}

ListaSREP* creareNodSREP(linieREP* rep) {
	ListaSREP* nou = (ListaSREP*)malloc(sizeof(ListaSREP));
	nou->info = rep;
	nou->nextS = NULL;
	return nou;
}

linieREP* creareREP(int idRez, char* idZbor, char* nume, int loc, float cost) {
	linieREP* rep = (linieREP*)malloc(sizeof(linieREP));
	rep->idRezervare = idRez;
	rep->idZbor = copiaza(idZbor);
	rep->numeClient = copiaza(nume);
	rep->locZbor = loc;
	rep->costBilet = cost;
	return rep;
}

ListaPREP* inserareLPREP(ListaPREP*& graf, linieREP* rep) {
	if (graf == NULL) {
		graf = creareNodPREP(rep);
		return graf;
	}
	else {
		ListaPREP* temp = graf;
		while (temp->nextP != NULL)
			temp = temp->nextP;
		temp->nextP = creareNodPREP(rep);
		return temp->nextP;
	}
}

ListaSREP* inserareLSREP(ListaSREP* noduriREP, linieREP* rep) {
	if (noduriREP == NULL)
		noduriREP = creareNodSREP(rep);
	else {
		ListaSREP* temp = noduriREP;
		while (temp->nextS)
			temp = temp->nextS;
		temp->nextS = creareNodSREP(rep);
	}
	return noduriREP;
}

void addREP(char* date) {
	char* dat = copiaza(date);
	char* aux;
	int idR, loc;
	float cost;
	aux = strtok(dat, " \t");
	idR = atoi(aux);
	char* idZ = strtok(NULL, " \t");
	char* nume = strtok(NULL, " \t");
	aux = strtok(NULL, " \t");
	loc = atoi(aux);
	aux = strtok(NULL, " \t");
	cost = atof(aux);

	linieREP* rep = creareREP(idR,idZ,nume,loc,cost);
	inserareLPREP(graf, rep);
	echo("Adaugare efectuata cu succes!\n");
}

void updateREP(char* date) {
	char* dat = copiaza(date);
	char* aux;
	int idR;
	aux = strtok(dat, " \t");
	idR = atoi(aux);
	ListaPREP* elem = cautaElementREP(idR);
	if (elem != nullptr) {
		linieREP* linie = elem->info;
		char* idZ = strtok(NULL, " \t");
		free(linie->idZbor);
		linie->idZbor = copiaza(idZ);
		char* nume = strtok(NULL, " \t");
		free(linie->numeClient);
		linie->numeClient = copiaza(nume);
		aux = strtok(NULL, " \t");
		linie->locZbor = atoi(aux);
		aux = strtok(NULL, " \t");
		linie->costBilet = atof(aux);
		echo("Date modul rezervare actualizate!\n");
	}
	else
		echo("Elementul nu a fost gasit!");
}

ListaSREP* cauta(ListaSREP* srep) {
	return srep;
}

ListaPREP* cautaElementREP(int id) {
	if (graf != NULL) {
		ListaPREP* origine = graf;
		do {
			if (graf->info->idRezervare == id)
				return graf;
			else if (graf->listaNoduri->info->idRezervare == id)
				cauta(graf->listaNoduri);
			graf = graf->nextP;
		} while (graf != origine);
	}
	return nullptr;
}


void citireFisierREP(FILE* f, ListaPREP* rep) {
	if (!f) {
		printf("Nu se poate deschide fisierul!");
	}
	else {
		int idRez;
		char idZbor[100];
		char nume[100];
		int loc;
		float cost; int aux;
		fscanf(f, "%d", &idRez);
		while (!feof(f))
		{
			fscanf(f, "%s", &idZbor);
			fscanf(f, "%s", &nume);
			fscanf(f, "%d", &loc);
			fscanf(f, "%f", &cost);
			fscanf(f, "%d", &aux);
			linieREP* rep = creareREP(idRez, idZbor, nume, loc, cost);
			//for (int i = 0; i < contor; i++) {
				ListaPREP* temp = inserareLPREP(graf, rep);
				while (fscanf(f, "%d", &idRez) && fscanf(f, "%s", &idZbor) &&
					fscanf(f, "%s", &nume) && fscanf(f, "%d", &loc) &&
					fscanf(f, "%f", &cost) && aux != -1) {
					linieREP* rep1 = creareREP(idRez, idZbor, nume, loc, cost);
					ListaSREP* noduri = temp->listaNoduri;
					noduri = inserareLSREP(noduri, rep1);
					temp->listaNoduri = noduri;
					fscanf(f, "%d", &aux);
				}
			//}
			fscanf(f, "%d", &idRez);
		}
	}
}

void afisareREP(ListaPREP* graf) {
	while (graf) {
		printf("Lista principala: %d %s %s %d %f \n", graf->info->idRezervare, graf->info->idZbor,
			graf->info->numeClient, graf->info->locZbor, graf->info->costBilet);
		ListaSREP* noduri = graf->listaNoduri;
		while (noduri) {
			printf("Lista secundara: %d %s %s %d %f \n", noduri->info->idRezervare, noduri->info->idZbor,
				noduri->info->numeClient, noduri->info->locZbor, noduri->info->costBilet);
			noduri = noduri->nextS;
		}
		graf = graf->nextP;
	}
}


void main() {
	FILE* f = fopen("pasageri.txt", "r");
	citireFisierREP(f,graf);
	afisareREP(graf);
	addREP("8 jjj loiuy 9 23.3");
	printf("-------------------\n");
	afisareREP(graf);
	printf("-------------------\n");
	afisareREP(cautaElementREP(8));
	

}

